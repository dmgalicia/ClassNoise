% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/models.R
\name{NNAR}
\alias{NNAR}
\title{Noisy Not At Radom (NNAR) model}
\usage{
NNAR(data, attrib.set, noise, class.idx = ncol(data), net = NULL)
}
\arguments{
\item{data}{A data frame containing categorical variables.}

\item{attrib.set}{A vector of strings representing the attributes related
with Error.}

\item{noise}{A number or a numeric vector of \code{n} elements between 0
and 1 representing the percentage of noise affecting each label. If a number
is provided all possible scenarios have the same probability of error}

\item{class.idx}{An optional numeric index for the position of the class
variable in the data frame. It is assumed the last variable in the data.}

\item{net}{A \code{bn} object representing the structure of the golden
Bayesian Network of the domain.}
}
\value{
A list with a \code{bn} object representing the structure and a
\code{bn.fit} object representing the parameterized model.
}
\description{
This function generates and fits NNAR models where each instance of an
attribute set and the class has a specific noise level. Noise levels are
introduced as a numeric vector which follows the order of the Cartesian
product of their factors. The number of parameters increases with the arity
of the attribute set and the possible values of each attribute. By default,
it employs a hill-climbing algorithm to discover the Bayesian Network
structure within the domain. Alternatively, it can accept an \code{bn}
object with an pre-defined structure. The \code{data} argument just receives
categorical data frames. The NNAR function also assumes the last variable
in the dataset serves as class and automatically renames it as 'Class'
during model creation.
}
\examples{
data(qb)

# This examples have P(Error = True | IR = P, Class = B) = 0.4,
# P(Error = True | IR = A, Class = B) = 0),
# P(Error = True | IR = N, Class = B) = 0.2,
# P(Error = True | IR = A, Class = NB) = 0),
# P(Error = True | IR = N, Class = NB) = 0.1,
# and P(Error = True | IR = A, Class = NB) = 0.3)
# Running the method without a predefined network
model <- NNAR(data = qb, attrib.set = c("IR"),
 noise = c(0.4, 0, 0.2, 0, 0.1, 0.3))
model$parameters$Error
# Running the method with a predefined network
network <- bnlearn::hc(qb)
fit <- bnlearn::bn.fit(network, qb)
model <- NNAR(data = qb, attrib.set = c("IR"),
  noise = c(0.4, 0, 0.2, 0, 0.1, 0.3), net = fit)
model$parameters$Error
}
