% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/models.R
\name{NAR}
\alias{NAR}
\title{Noise At Random (NAR) model}
\usage{
NAR(data, noise, class.idx = ncol(data), network = NULL)
}
\arguments{
\item{data}{A data frame containing the domain variables.}

\item{noise}{A number or a numeric vector of \code{n} elements between 0
and 1 representing the percentage of noise affecting each label. If a
number is provided all clases have the same probability of error}

\item{class.idx}{An optional numeric index for the position of the class
variable in the data frame. It is assumed the last variable in the data.}

\item{network}{A \code{bn} object representing the structure of the golden
Bayesian Network of the domain.}
}
\value{
A list with a \code{bn} object representing the structure and a
\code{bn.fit} object representing the parameterized model.
}
\description{
This function generates and fits NAR models where each class label has a
specific noise level. Noise levels are introduced as a numeric vector
which follows the order of the class factor. By default, it employs a
hill-climbing algorithm to discover the Bayesian Network structure.
Alternatively, it can accept an \code{bn} object with a pre-defined
structure. The \code{data} argument can receive data frames with numeric
and categorical variables. The NAR function also assumes the last variable
in the dataset serves as class and automatically renames it as 'Class'
during model creation.
}
\examples{
data(qb)

# The following examples have P(Error = True | Class = B) = 0.5
# and P(True | Error = Class = NB) = 0
# Running the method without a predefined network
model <- NAR(data = qb, noise = c(0.5, 0))
model$parameters$Error
# Running the method with a predefined network
network <- bnlearn::hc(qb)
fit <- bnlearn::bn.fit(network, qb)
model <- NAR(data = qb, noise = c(0.5, 0), network = fit)
model$parameters$Error
}
